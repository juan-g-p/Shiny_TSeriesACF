SES = ETS(value ~ error("A") + trend("N") + season("N")),
Holt = ETS(value ~ error("A") + trend("A") + season("N")),
Damped = ETS(value ~ error("A") + trend("Ad") +
season("N"))
)
fit _cv <-
fit_cv <-
www_usage_cv %>%
model(
SES = ETS(value ~ error("A") + trend("N") + season("N")),
Holt = ETS(value ~ error("A") + trend("A") + season("N")),
Damped = ETS(value ~ error("A") + trend("Ad") +
season("N"))
)
www_usage_cv <- www_usage %>%
stretch_tsibble(.init = 10)
# Examine the table created
www_usage_cv
# Examine the number of datasets created
www_usage_cv %>% select(.id)
www_usage_cv <- www_usage %>%
stretch_tsibble(.init = 10)
# Examine the table created
www_usage_cv
# Examine the number of datasets created
www_usage_cv %>% pull(.id) %>% max()
www_usage_cv <- www_usage %>%
stretch_tsibble(.init = 10)
# Examine the table created
www_usage_cv
# Examine the number of datasets created
www_usage_cv %>% select(.id) %>% max()
www_usage_cv <- www_usage %>%
stretch_tsibble(.init = 10)
# Examine the table created
www_usage_cv
# Examine the number of datasets created
www_usage_cv %>% pull(.id) %>% max()
fit_cv <-
www_usage_cv %>%
model(
SES = ETS(value ~ error("A") + trend("N") + season("N")),
Holt = ETS(value ~ error("A") + trend("A") + season("N")),
Damped = ETS(value ~ error("A") + trend("Ad") +
season("N"))
)
fit_cv
fit_cv <-
www_usage_cv %>%
model(
SES = ETS(value ~ error("A") + trend("N") + season("N")),
Holt = ETS(value ~ error("A") + trend("A") + season("N")),
Damped = ETS(value ~ error("A") + trend("Ad") +
season("N"))
)
fit_cv
fit_cv %>% forecast(h=1) %>% accuracy(www_usage)
fit_cv %>% forecast(h=1) %>% accuracy(www_usage) %>% select(MAE, RMSE)
fit_cv %>% select(Damped)
fit_cv %>% select(Damped) %>% tidy
fit_dampened2 <-
aus_economy %>%
model(
`Holt's method` = ETS(Pop ~ error("A") +
trend("A") + season("N")),
`Damped Holt's method` = ETS(Pop ~ error("A") +
trend("Ad", phi = NULL, phi_range=c(0.8, 0.98)) +
season("N"))
)
fit_dampened2 <-
aus_economy %>%
model(
`Holt's method` = ETS(Pop ~ error("A") +
trend("A") + season("N")),
`Damped Holt's method` = ETS(Pop ~ error("A") +
trend("Ad", phi = NULL, phi_range=c(0.8, 0.98)) +
season("N"))
)
tidy(fit_dampened2)
fc_dampened2 <- fit_dampened2 %>% forecast(h = 15)
fc_dampened2 %>%
autoplot(aus_economy, level = NULL) +
labs(title = "Australian population",
y = "Millions") +
guides(colour = guide_legend(title = "Forecast"))
fc_dampened3 <- fit_dampened3 %>% forecast(h = 15)
fit_dampened3 <-
aus_economy %>%
model(
`Holt's method` = ETS(Pop ~ error("A") +
trend("A") + season("N")),
`Damped Holt's method` = ETS(Pop ~ error("A") +
trend("Ad") +
season("N"))
)
tidy(fit_dampened3)
fc_dampened3 <- fit_dampened3 %>% forecast(h = 15)
fc_dampened3 %>%
autoplot(aus_economy, level = NULL) +
labs(title = "Australian population",
y = "Millions") +
guides(colour = guide_legend(title = "Forecast"))
fit_dampened2 <-
aus_economy %>%
model(
`Holt's method` = ETS(Pop ~ error("A") +
trend("A") + season("N")),
`Damped Holt's method` = ETS(Pop ~ error("A") +
trend("Ad", phi = NULL, phi_range=c(0.8, 0.95)) +
season("N"))
)
tidy(fit_dampened2)
fc_dampened2 <- fit_dampened2 %>% forecast(h = 15)
fc_dampened2 %>%
autoplot(aus_economy, level = NULL) +
labs(title = "Australian population",
y = "Millions") +
guides(colour = guide_legend(title = "Forecast"))
fit_dampened3 <-
aus_economy %>%
model(
`Holt's method` = ETS(Pop ~ error("A") +
trend("A") + season("N")),
`Damped Holt's method` = ETS(Pop ~ error("A") +
trend("Ad") +
season("N"))
)
tidy(fit_dampened3)
fc_dampened3 <- fit_dampened3 %>% forecast(h = 15)
fc_dampened3 %>%
autoplot(aus_economy, level = NULL) +
labs(title = "Australian population",
y = "Millions") +
guides(colour = guide_legend(title = "Forecast"))
www_usage_cv <- www_usage %>%
stretch_tsibble(.init = 10)
# Examine the table created
www_usage_cv
# Examine the number of datasets created
www_usage_cv %>% pull(.id) %>% max()
fit_cv %>% forecast(h=1) %>% accuracy(www_usage) %>% select(MAE, RMSE)
fit_cv <-
www_usage_cv %>%
model(
SES = ETS(value ~ error("A") + trend("N") + season("N")),
Holt = ETS(value ~ error("A") + trend("A") + season("N")),
Damped = ETS(value ~ error("A") + trend("Ad") +
season("N"))
)
fit_cv
fit_cv %>% forecast(h=1) %>% accuracy(www_usage) %>% select(.model, MAE, RMSE)
fit <- www_usage %>%
model(
Damped = ETS(value ~ error("A") + trend("Ad") +
season("N"))
) %>% tidy()
fit <- www_usage %>%
model(
Damped = ETS(value ~ error("A") + trend("Ad") +
season("N"))
) %>% tidy()
fit <- www_usage %>%
model(
Damped = ETS(value ~ error("A") + trend("Ad") +
season("N"))
)
fit <- www_usage %>%
model(
Damped = ETS(value ~ error("A") + trend("Ad") +
season("N"))
)
fit
fit %>% tidy()
fit <- www_usage %>%
model(
Damped = ETS(value ~ error("A") + trend("Ad") +
season("N"))
)
fit
fit <- www_usage %>%
model(
Damped = ETS(value ~ error("A") + trend("Ad") +
season("N"))
)
tidy(fit)
# Filter data
aus_holidays <- tourism %>%
filter(Purpose == "Holiday") %>%
summarise(Trips = sum(Trips)/1e3)
# Fit the models: Generative and multiplicative seasonality
fit <- aus_holidays %>%
model(
additive = ETS(Trips ~ error("A") + trend("A") +
season("A")),
multiplicative = ETS(Trips ~ error("M") + trend("A") +
season("M"))
)
# Generate forecasts
fc <- fit %>% forecast(h = "3 years")
fc %>%
autoplot(aus_holidays, level = NULL) +
labs(title="Australian domestic tourism",
y="Overnight trips (millions)") +
guides(colour = guide_legend(title = "Forecast"))
# Filter data
aus_holidays <- tourism %>%
filter(Purpose == "Holiday") %>%
summarise(Trips = sum(Trips)/1e3)
# Fit the models: Generative and multiplicative seasonality
fit <- aus_holidays %>%
model(
additive = ETS(Trips ~ error("A") + trend("A") +
season("A")),
multiplicative = ETS(Trips ~ error("M") + trend("A") +
season("M"))
)
# Generate forecasts
fc <- fit %>% forecast(h = "3 years")
# Plot the forecasts
fc %>%
autoplot(aus_holidays, level = NULL) +
labs(title="Australian domestic tourism",
y="Overnight trips (millions)") +
guides(colour = guide_legend(title = "Forecast"))
# Filter data
aus_holidays <- tourism %>%
filter(Purpose == "Holiday") %>%
summarise(Trips = sum(Trips)/1e3)
# Fit the models: Generative and multiplicative seasonality
fit <- aus_holidays %>%
model(
additive = ETS(Trips ~ error("A") + trend("A") +
season("A")),
multiplicative = ETS(Trips ~ error("M") + trend("A") +
season("M"))
)
# Generate forecasts
fc <- fit %>% forecast(h = "3 years")
# Plot the forecasts
fc %>%
autoplot(aus_holidays, level = NULL) +
labs(title="Australian domestic tourism",
y="Overnight trips (millions)") +
guides(colour = guide_legend(title = "Forecast"))
aus_holidays
aus_holidays %>% mutate(mean(trips))
aus_holidays %>% mutate(mtrips = mean(trips))
aus_holidays %>% mutate(mtrips = mean(Trips))
aus_holidays %>% mutate(mtrips = median(Trips))
aus_holidays %>% mutate(mtrips = mean(Trips))
aus_holidays %>%
model(
classical_decomposition(Trips, type = "additive")
) %>%
components() %>%
autoplot() +
labs(title = "Classical additive decomposition of total
US retail employment")
aus_holidays %>%
model(
classical_decomposition(Trips, type = "additive")
) %>%
components()
aus_holidays %>%
model(
classical_decomposition(Trips, type = "multiplicative")
) %>%
components()
aus_holidays
aus_holidays
write.xlsx(aus_holidays, "C:/Users/Juan/OneDrive/IE/2022_Fall/ZZ_Notebooks/NB_PPLE_Fall2022/aus_holidays.xlsx")
aus_holidays <- tourism %>%
filter(Purpose == "Holiday") %>%
summarise(Trips = sum(Trips)/1e3)
fit <- aus_holidays %>%
model(
additive = ETS(Trips ~ error("A") + trend("A") +
season("A")),
multiplicative = ETS(Trips ~ error("M") + trend("A") +
season("M"))
)
fc <- fit %>% forecast(h = "3 years")
fc %>%
autoplot(aus_holidays, level = NULL) +
labs(title="Australian domestic tourism",
y="Overnight trips (millions)") +
guides(colour = guide_legend(title = "Forecast"))
fc
fc %>% components()
components(fit)
components(fc)
components(fit) %>$
components(fit) %>%
autoplot() +
labs(title = "ETS(M, N, A) components")
components(fit) %>%
autoplot() +
labs(title = "ETS(M, N, A) components") +
facet_wrap(.model)
fit
components(fit) %>% select("additive")
components(fit) %>% select("additive") %>%
autoplot() +
labs(title = "ETS(M, N, A) components") +
facet_wrap(.model)
fit %>% select("additive") %>% components()
autoplot() +
labs(title = "ETS(M, N, A) components") +
facet_wrap(.model)
fit %>% select("additive") %>% components() +
autoplot() +
labs(title = "ETS(M, N, A) components") +
facet_wrap(.model)
fit %>% select("additive") %>% components()
# autoplot() +
# labs(title = "ETS(M, N, A) components") +
# facet_wrap(.model)
fit %>% select("additive") %>% components() %>%
autoplot() +
labs(title = "ETS(M, N, A) components") +
facet_wrap(.model)
fit %>% select("additive") %>% components() %>%
autoplot() +
labs(title = "ETS(M, N, A) components") +
facet_wrap(.model)
fit %>% select("additive") %>% components() %>%
autoplot() +
labs(title = "ETS(M, N, A) components") +
# facet_wrap(.model)
fit %>% select("additive") %>% components() %>%
autoplot() +
labs(title = "ETS(M, N, A) components")
# facet_wrap(.model)
#Additional libraries that I do not want interfering with the code
library(patchwork)
library(cowplot)
library(ggdist)
#Additional libraries that I do not want interfering with the code
library(patchwork)
library(cowplot)
library(ggdist)
#Additional libraries that I do not want interfering with the code
library(patchwork)
library(cowplot)
library(ggdist)
fig_additive <- fit %>%
select("additive") %>%
components() %>%
autoplot() +
labs(title = "ETS(M, N, A) components")
# facet_wrap(.model)
fig_additive <- fit %>%
select("additive") %>%
components() %>%
autoplot() +
labs(title = "ETS(M, N, A) components")
# facet_wrap(.model)
fig_multiplicative <- fit %>%
select("multiplicative") %>%
components() %>%
autoplot() +
labs(title = "ETS(M, N, A) components")
# facet_wrap(.model)
fig_additive <- fit %>%
select("additive") %>%
components() %>%
autoplot() +
labs(title = "ETS(M, N, A) components")
# facet_wrap(.model)
fig_multiplicative <- fit %>%
select("multiplicative") %>%
components() %>%
autoplot() +
labs(title = "ETS(M, N, A) components")
# facet_wrap(.model)
fig_multiplicative
fig_additive <- fit %>%
select("additive") %>%
components() %>%
autoplot() +
labs(title = "ETS(M, N, A) components")
# facet_wrap(.model)
fig_multiplicative <- fit %>%
select("multiplicative") %>%
components() %>%
autoplot() +
labs(title = "ETS(M, N, A) components")
# facet_wrap(.model)
fig_additive + fig_multiplicative
fit %>% accuracy() %>% selecT(.model, RMSE)
fit %>% accuracy() %>% select(.model, RMSE)
fit %>% accuracy() %>% select(.model, round(RMSE, 4))
fit %>% accuracy() %>% select(.model, RMSE) %>% mutate(RMSE = round(RMSE, 4))
fig_additive <- fit %>%
select("additive") %>%
components() %>%
autoplot() +
labs(title = "ETS(M, N, A) components")
# facet_wrap(.model)
fig_multiplicative <- fit %>%
select("multiplicative") %>%
components() %>%
autoplot() +
labs(title = "ETS(M, N, A) components")
# facet_wrap(.model)
fig_additive + fig_multiplicative
sth_cross_ped <- pedestrian %>%
filter(Date >= "2016-07-01",
Sensor == "Southern Cross Station") %>%
index_by(Date) %>%
summarise(Count = sum(Count)/1000)
sth_cross_ped <- pedestrian %>%
filter(Date >= "2016-07-01",
Sensor == "Southern Cross Station") %>%
index_by(Date) %>%
summarise(Count = sum(Count)/1000)
sth_cross_ped
fit <- sth_cross_ped %>%
filter(Date <= "2016-07-31") %>%
model(
hw = ETS(Count ~ error("M") + trend("Ad") + season("M"))
)
fit <- sth_cross_ped %>%
filter(Date <= "2016-07-31") %>%
model(
hw = ETS(Count ~ error("M") + trend("Ad") + season("M"))
)
fc <- fit %>%
forecast(h = "2 weeks") %>%
autoplot(sth_cross_ped %>% filter(Date <= "2016-08-14")) +
labs(title = "Daily traffic: Southern Cross",
y="Pedestrians ('000)")
fit <- sth_cross_ped %>%
filter(Date <= "2016-07-31") %>%
model(
hw = ETS(Count ~ error("M") + trend("Ad") + season("M"))
)
fc <- fit %>%
forecast(h = "2 weeks")thern Cross",
fit <- sth_cross_ped %>%
filter(Date <= "2016-07-31") %>%
model(
hw = ETS(Count ~ error("M") + trend("Ad") + season("M"))
)
fc <- fit %>%
forecast(h = "2 weeks")
fc %>%
autoplot(sth_cross_ped %>% filter(Date <= "2016-08-14")) +
labs(title = "Daily traffic: Southern Cross",
y="Pedestrians ('000)")
View(fc)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
library(fpp3)
library(readxl)
library(fpp3)
library(readxl)
View(melsyd_economy)
library(shiny); source('IE_Classes/ZZ_Apps/Shiny_ACF/Shiny_TSeriesACF/run.R')
setwd("~/IE_Classes/ZZ_Apps/Shiny_ACF/Shiny_TSeriesACF")
source('run.R')
autoplot(aus_production, Beer)
aus_production %>% mutate(beer_lag = lag(Beer, 1))
aus_production %>% mutate(beer_lag = lag(Beer, 1)) %>% select(Beer, beer_lag)
autoplot(aus_production, Beer) +
geom_line(aus_production %>% mutate(beer_lag = lag(Beer, 1))
aes(x = Quarter, y = beer_lag)
autoplot(aus_production, Beer) +
geom_line(aus_production %>% mutate(beer_lag = lag(Beer, 1)),
aes(x = Quarter, y = beer_lag)
)
autoplot(aus_production, Beer) +
geom_line(data = aus_production %>% mutate(beer_lag = lag(Beer, 1)),
aes(x = Quarter, y = beer_lag)
)
autoplot(aus_production, Beer) +
geom_line(data = aus_production %>% mutate(beer_lag = lag(Beer, 1)),
aes(x = Quarter, y = beer_lag),
color = "red"
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("~/IE_Classes/ZZ_Apps/Shiny_ACF/Shiny_TSeriesACF/server_copy.R", echo=TRUE)
runApp()
runApp()
runApp()
TRUE = FALSE
TRUE == FALSE
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
geom_blank()
ggplot(mtcars, aes(x = wt, y = mpg)) + geom_blank()
runApp()
runApp()
runApp()
runApp()
runApp()
source('run.R')
runApp()
